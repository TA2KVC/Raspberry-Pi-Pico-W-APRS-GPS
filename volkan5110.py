"""
MicroPython Nokia 5110 PCD8544 84x48 LCD driver
Türkçe karakter desteği ve mini 3x5 font eklenmiş

MIT License
Copyright (c) 2016-2018 Mike Causer
"""

from micropython import const
from ustruct import pack
from utime import sleep_us
import framebuf

# ==============================
# LCD Komutları ve ayarlar
# ==============================
FUNCTION_SET     = const(0x20)
POWER_DOWN       = const(0x04)
ADDRESSING_VERT  = const(0x02)
EXTENDED_INSTR   = const(0x01)

DISPLAY_BLANK    = const(0x08)
DISPLAY_ALL      = const(0x09)
DISPLAY_NORMAL   = const(0x0c)
DISPLAY_INVERSE  = const(0x0d)

TEMP_COEFF_0     = const(0x04)
TEMP_COEFF_1     = const(0x05)
TEMP_COEFF_2     = const(0x06)
TEMP_COEFF_3     = const(0x07)

BIAS_1_40        = const(0x14)

SET_VOP          = const(0x80)

COL_ADDR         = const(0x80)
BANK_ADDR        = const(0x40)

WIDTH            = const(84)
HEIGHT           = const(48)

# ==============================
# Büyük 5x8 font (ASCII + Türkçe)
# ==============================
# 5x8 font (basit ASCII, sadece örnek)
FONT = {' ': [0x00,0x00,0x00,0x00,0x00], '!':[0x00,0x00,0x5F,0x00,0x00], '"':[0x00,0x07,0x00,0x07,0x00],
'#':[0x14,0x7F,0x14,0x7F,0x14], '$':[0x24,0x2A,0x7F,0x2A,0x12], '%':[0x23,0x13,0x08,0x64,0x62],
'&':[0x36,0x49,0x55,0x22,0x50], "'":[0x00,0x05,0x03,0x00,0x00], '(': [0x00,0x1C,0x22,0x41,0x00],
')':[0x00,0x41,0x22,0x1C,0x00], '*':[0x14,0x08,0x3E,0x08,0x14], '+':[0x08,0x08,0x3E,0x08,0x08],
',':[0x00,0x50,0x30,0x00,0x00], '-':[0x08,0x08,0x08,0x08,0x08], '.':[0x00,0x60,0x60,0x00,0x00],
'/':[0x20,0x10,0x08,0x04,0x02], '0':[0x3E,0x51,0x49,0x45,0x3E], '1':[0x00,0x42,0x7F,0x40,0x00],
'2':[0x42,0x61,0x51,0x49,0x46], '3':[0x21,0x41,0x45,0x4B,0x31], '4':[0x18,0x14,0x12,0x7F,0x10],
'5':[0x27,0x45,0x45,0x45,0x39], '6':[0x3C,0x4A,0x49,0x49,0x30], '7':[0x01,0x71,0x09,0x05,0x03],
'8':[0x36,0x49,0x49,0x49,0x36], '9':[0x06,0x49,0x49,0x29,0x1E], ':':[0x00,0x36,0x36,0x00,0x00],
';':[0x00,0x56,0x36,0x00,0x00], '<':[0x08,0x14,0x22,0x41,0x00], '=':[0x14,0x14,0x14,0x14,0x14],
'>':[0x00,0x41,0x22,0x14,0x08], '?':[0x02,0x01,0x51,0x09,0x06], '@':[0x32,0x49,0x79,0x41,0x3E],
'A':[0x7E,0x11,0x11,0x11,0x7E], 'B':[0x7F,0x49,0x49,0x49,0x36], 'C':[0x3E,0x41,0x41,0x41,0x22],
'D':[0x7F,0x41,0x41,0x22,0x1C], 'E':[0x7F,0x49,0x49,0x49,0x41], 'F':[0x7F,0x09,0x09,0x09,0x01],
'G':[0x3E,0x41,0x49,0x49,0x7A], 'H':[0x7F,0x08,0x08,0x08,0x7F], 'I':[0x00,0x41,0x7F,0x41,0x00],
'J':[0x20,0x40,0x41,0x3F,0x01], 'K':[0x7F,0x08,0x14,0x22,0x41], 'L':[0x7F,0x40,0x40,0x40,0x40],
'M':[0x7F,0x02,0x0C,0x02,0x7F], 'N':[0x7F,0x04,0x08,0x10,0x7F], 'O':[0x3E,0x41,0x41,0x41,0x3E],
'P':[0x7F,0x09,0x09,0x09,0x06], 'Q':[0x3E,0x41,0x51,0x21,0x5E], 'R':[0x7F,0x09,0x19,0x29,0x46],
'S':[0x46,0x49,0x49,0x49,0x31], 'T':[0x01,0x01,0x7F,0x01,0x01], 'U':[0x3F,0x40,0x40,0x40,0x3F],
'V':[0x1F,0x20,0x40,0x20,0x1F], 'W':[0x7F,0x20,0x18,0x20,0x7F], 'X':[0x63,0x14,0x08,0x14,0x63],
'Y':[0x03,0x04,0x78,0x04,0x03], 'Z':[0x61,0x51,0x49,0x45,0x43], '[':[0x00,0x7F,0x41,0x41,0x00],
'\\':[0x02,0x04,0x08,0x10,0x20], ']':[0x00,0x41,0x41,0x7F,0x00], '^':[0x04,0x02,0x01,0x02,0x04],
'_':[0x40,0x40,0x40,0x40,0x40], '`':[0x00,0x01,0x02,0x04,0x00], 'a':[0x20,0x54,0x54,0x54,0x78],
'b':[0x7F,0x48,0x44,0x44,0x38], 'c':[0x38,0x44,0x44,0x44,0x20], 'd':[0x38,0x44,0x44,0x48,0x7F],
'e':[0x38,0x54,0x54,0x54,0x18], 'f':[0x08,0x7E,0x09,0x01,0x02], 'g':[0x0C,0x52,0x52,0x52,0x3E],
'h':[0x7F,0x08,0x04,0x04,0x78], 'i':[0x00,0x44,0x7D,0x40,0x00], 'j':[0x20,0x40,0x44,0x3D,0x00],
'k':[0x7F,0x10,0x28,0x44,0x00], 'l':[0x00,0x41,0x7F,0x40,0x00], 'm':[0x7C,0x04,0x18,0x04,0x78],
'n':[0x7C,0x08,0x04,0x04,0x78], 'o':[0x38,0x44,0x44,0x44,0x38], 'p':[0x7C,0x14,0x14,0x14,0x08],
'q':[0x08,0x14,0x14,0x18,0x7C], 'r':[0x7C,0x08,0x04,0x04,0x08], 's':[0x48,0x54,0x54,0x54,0x20],
't':[0x04,0x3F,0x44,0x40,0x20], 'u':[0x3C,0x40,0x40,0x20,0x7C], 'v':[0x1C,0x20,0x40,0x20,0x1C],
'w':[0x3C,0x40,0x30,0x40,0x3C], 'x':[0x44,0x28,0x10,0x28,0x44], 'y':[0x0C,0x50,0x50,0x50,0x3C],
'z':[0x44,0x64,0x54,0x4C,0x44], '{':[0x00,0x08,0x36,0x41,0x00], '|':[0x00,0x00,0x7F,0x00,0x00],
'}':[0x00,0x41,0x36,0x08,0x00], '~':[0x08,0x04,0x08,0x10,0x08],
# --- Türkçe karakterler ---
'ç': [0x38,0x44,0x54,0x54,0x08], 'Ç': [0x3E,0x41,0x41,0x41,0x22],
'ğ': [0x38,0x54,0x54,0x54,0x78], 'Ğ': [0x7E,0x11,0x11,0x11,0x7E],
'ö': [0x38,0x44,0x54,0x54,0x38], 'Ö': [0x3E,0x41,0x55,0x41,0x3E],
'ş': [0x48,0x54,0x54,0x54,0x20], 'Ş': [0x46,0x49,0x49,0x49,0x31],
'ü': [0x3C,0x40,0x40,0x20,0x7C], 'Ü': [0x3F,0x40,0x5F,0x40,0x3F],
'ı': [0x00,0x00,0x7D,0x00,0x00], 'İ': [0x00,0x41,0x7F,0x41,0x00],
'°' : [0x06,0x09,0x09,0x06,0x00], 'CHECK': [0x08, 0x1C, 0x36, 0x63, 0x41], '✅': [0x08, 0x1C, 0x36, 0x63, 0x41]

}

# ==============================
# Küçük 5x7 font
# ==============================
SMALL_FONT = FONT  # Aynı karakter seti kullanılabilir

# ==============================
# Mini 3x5 font (ASCII + Türkçe)
# ==============================
MINI_FONT = {
' ': [0x00,0x00,0x00],
'!':[0x00,0x17,0x00],
'"':[0x03,0x00,0x03],
'#':[0x0A,0x1F,0x0A],
'$':[0x12,0x0F,0x09],
'%':[0x19,0x04,0x13],
'&':[0x0A,0x15,0x12],
"'":[0x00,0x03,0x01],
'(':[0x00,0x0E,0x11],
')':[0x11,0x0E,0x00],
'*':[0x05,0x02,0x05],
'+':[0x04,0x0E,0x04],
',':[0x10,0x08,0x00],
'-':[0x04,0x04,0x04],
'.':[0x00,0x10,0x00],
'/':[0x10,0x08,0x04],
'0':[0x0E,0x11,0x0E],
'1':[0x00,0x1F,0x00],
'2':[0x19,0x15,0x12],
'3':[0x11,0x15,0x0A],
'4':[0x0C,0x0A,0x1F],
'5':[0x17,0x15,0x09],
'6':[0x0E,0x15,0x09],
'7':[0x01,0x01,0x1F],
'8':[0x0A,0x15,0x0A],
'9':[0x02,0x15,0x0E],
':':[0x00,0x0A,0x00],
';':[0x10,0x0A,0x00],
'<':[0x04,0x0A,0x11],
'=':[0x0A,0x0A,0x0A],
'>':[0x11,0x0A,0x04],
'?':[0x02,0x01,0x13],
'@':[0x0E,0x15,0x1A],
'A':[0x0E,0x05,0x0E],
'B':[0x1F,0x15,0x0A],
'C':[0x0E,0x11,0x11],
'D':[0x1F,0x11,0x0E],
'E':[0x1F,0x15,0x11],
'F':[0x1F,0x05,0x01],
'G':[0x0E,0x11,0x0D],
'H':[0x1F,0x04,0x1F],
'I':[0x11,0x1F,0x11],
'J':[0x08,0x10,0x0F],
'K':[0x1F,0x04,0x1B],
'L':[0x1F,0x10,0x10],
'M':[0x1F,0x06,0x1F],
'N':[0x1F,0x0C,0x1F],
'O':[0x0E,0x11,0x0E],
'P':[0x1F,0x05,0x02],
'Q':[0x0E,0x11,0x1E],
'R':[0x1F,0x05,0x1A],
'S':[0x12,0x15,0x09],
'T':[0x01,0x1F,0x01],
'U':[0x0F,0x10,0x0F],
'V':[0x07,0x18,0x07],
'W':[0x0F,0x0C,0x0F],
'X':[0x1B,0x04,0x1B],
'Y':[0x03,0x1C,0x03],
'Z':[0x19,0x15,0x13],
'a':[0x08,0x14,0x1C],
'b':[0x1F,0x14,0x08],
'c':[0x0C,0x12,0x12],
'd':[0x08,0x14,0x1F],
'e':[0x0C,0x1A,0x0A],
'f':[0x04,0x1F,0x05],
'g':[0x0A,0x15,0x0E],
'h':[0x1F,0x04,0x18],
'i':[0x00,0x1D,0x00],
'j':[0x10,0x10,0x0D],
'k':[0x1F,0x08,0x14],
'l':[0x11,0x1F,0x10],
'm':[0x1E,0x04,0x1C],
'n':[0x1E,0x04,0x18],
'o':[0x0C,0x12,0x0C],
'p':[0x1E,0x0A,0x04],
'q':[0x04,0x0A,0x1E],
'r':[0x1C,0x04,0x08],
's':[0x14,0x1A,0x0A],
't':[0x04,0x0F,0x04],
'u':[0x0C,0x10,0x1C],
'v':[0x0C,0x10,0x0C],
'w':[0x0C,0x08,0x0C],
'x':[0x14,0x08,0x14],
'y':[0x0A,0x14,0x0A],
'z':[0x14,0x1C,0x0C],
'[':[0x00,0x1F,0x11],
'\\':[0x01,0x02,0x04],
']':[0x11,0x1F,0x00],
'^':[0x04,0x02,0x04],
'_':[0x10,0x10,0x10],
'`':[0x00,0x01,0x02],
'{':[0x04,0x1B,0x11],
'|':[0x00,0x1F,0x00],
'}':[0x11,0x1B,0x04],
'~':[0x02,0x05,0x02],
'Ç':[0x0E,0x11,0x11],
'ç':[0x0C,0x12,0x0A],
'Ğ':[0x1F,0x05,0x1F],
'ğ':[0x0C,0x14,0x1C],
'İ':[0x02,0x1F,0x02],
'ı':[0x00,0x0F,0x00],
'Ö':[0x0E,0x15,0x0E],
'ö':[0x0C,0x16,0x0C],
'Ş':[0x11,0x1F,0x09],
'ş':[0x12,0x15,0x09],
'Ü':[0x0F,0x17,0x0F],
'ü':[0x0C,0x10,0x1C],
'°':[0x06,0x09,0x06],
'±':[0x04,0x1F,0x04],
'×':[0x1B,0x04,0x1B],
'÷':[0x04,0x0E,0x04],
'€':[0x1E,0x15,0x12],
'£':[0x1F,0x05,0x04],
'¥':[0x11,0x1F,0x11]
}

# ==============================
# PCD8544_FB Sınıfı
# ==============================
class PCD8544_FB(framebuf.FrameBuffer):
    def __init__(self, spi, cs, dc, rst=None):
        self.spi = spi
        self.cs  = cs
        self.dc  = dc
        self.rst = rst

        self.width = WIDTH
        self.height = HEIGHT

        self.cs.init(self.cs.OUT, value=1)
        self.dc.init(self.dc.OUT, value=0)
        if self.rst:
            self.rst.init(self.rst.OUT, value=1)

        self.buf = bytearray((HEIGHT // 8) * WIDTH)
        super().__init__(self.buf, WIDTH, HEIGHT, framebuf.MONO_VLSB)

        if self.rst:
            self.reset()
        self.init()

    # -------------------------
    # Temel LCD fonksiyonları
    # -------------------------
    def reset(self):
        if self.rst:
            self.rst(1)
            sleep_us(100)
            self.rst(0)
            sleep_us(100)
            self.rst(1)
            sleep_us(100)

    def cmd(self, command):
        self.dc(0)
        self.cs(0)
        self.spi.write(bytearray([command]))
        self.cs(1)

    def data(self, data):
        self.dc(1)
        self.cs(0)
        self.spi.write(pack('B'*len(data), *data))
        self.cs(1)

    def init(self, horizontal=True, contrast=0x3f, bias=BIAS_1_40, temp=TEMP_COEFF_2):
        # temel init
        self.fn = FUNCTION_SET
        self.addressing(horizontal)
        for cmd in (
            self.fn | EXTENDED_INSTR,
            temp,
            bias,
            SET_VOP | contrast,
            self.fn & ~EXTENDED_INSTR
        ):
            self.cmd(cmd)
        self.cmd(DISPLAY_NORMAL)
        self.clear()

    def addressing(self, horizontal=True):
        if horizontal:
            self.fn &= ~ADDRESSING_VERT
        else:
            self.fn |= ADDRESSING_VERT
        self.cmd(self.fn)

    def clear(self):
        self.data([0] * (WIDTH * HEIGHT // 8))
        self.position(0, 0)

    def position(self, x, y):
        self.cmd(COL_ADDR | x)
        self.cmd(BANK_ADDR | y)
    # ==============================
    # Yazı Fonksiyonları
    # ==============================
    def draw_char2(self, x, y, char, color=1):
        if char not in FONT:
            char = " "
        font_data = FONT[char]
        for col, byte in enumerate(font_data):
            for row in range(7):
                if byte & (1<<row):
                    self.pixel(x+col, y+row, color)
                    
    def draw_char(self, x, y, char, color=1):
        if char not in FONT:
            char = " "
        font_data = FONT[char]
        for col, byte in enumerate(font_data):
            for row in range(7):
                pixel_on = byte & (1 << row)
                if color == 0:
                    self.pixel(x + col, y + row, 0)
                elif color == 1:
                    if pixel_on:
                        self.pixel(x + col, y + row, 1)
                elif color == 2:  # inverted
                    self.pixel(x + col, y + row, 0 if pixel_on else 1)
            
    def draw_text(self, x, y, text, color=1, spacing=1):
        for i, c in enumerate(text):
            self.draw_char(x + i*(5 + spacing), y, c, color)

    def draw_char_small(self, x, y, char, color=1):
        if char not in SMALL_FONT:
            char = " "
        font_data = SMALL_FONT[char]
        for col, byte in enumerate(font_data):
            for row in range(7):
                if byte & (1<<row):
                    self.pixel(x+col, y+row, color)

    def draw_text_small(self, x, y, text, color=1, spacing=1):
        for i, c in enumerate(text):
            self.draw_char_small(x + i*(6+spacing), y, c, color)

    def draw_char_mini(self, x, y, char, color=1):
        if char not in MINI_FONT:
            char = " "
        font_data = MINI_FONT[char]
        for col, byte in enumerate(font_data):
            for row in range(5):
                if byte & (1<<row):
                    self.pixel(x+col, y+row, color)

    def draw_text_mini(self, x, y,  text, color=1, spacing=1):
        for i, c in enumerate(text):
            self.draw_char_mini(x + i*(3+spacing), y, c, color)

    def show(self):
        self.data(self.buf)


